// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/inventoryapi/v1/common_tasks.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommonTasksService_GetModels_FullMethodName = "/apis.inventoryapi.v1.CommonTasksService/GetModels"
)

// CommonTasksServiceClient is the client API for CommonTasksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonTasksServiceClient interface {
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error)
}

type commonTasksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonTasksServiceClient(cc grpc.ClientConnInterface) CommonTasksServiceClient {
	return &commonTasksServiceClient{cc}
}

func (c *commonTasksServiceClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error) {
	out := new(GetModelsResponse)
	err := c.cc.Invoke(ctx, CommonTasksService_GetModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonTasksServiceServer is the server API for CommonTasksService service.
// All implementations must embed UnimplementedCommonTasksServiceServer
// for forward compatibility
type CommonTasksServiceServer interface {
	GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error)
	mustEmbedUnimplementedCommonTasksServiceServer()
}

// UnimplementedCommonTasksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommonTasksServiceServer struct {
}

func (UnimplementedCommonTasksServiceServer) GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedCommonTasksServiceServer) mustEmbedUnimplementedCommonTasksServiceServer() {}

// UnsafeCommonTasksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonTasksServiceServer will
// result in compilation errors.
type UnsafeCommonTasksServiceServer interface {
	mustEmbedUnimplementedCommonTasksServiceServer()
}

func RegisterCommonTasksServiceServer(s grpc.ServiceRegistrar, srv CommonTasksServiceServer) {
	s.RegisterService(&CommonTasksService_ServiceDesc, srv)
}

func _CommonTasksService_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonTasksServiceServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonTasksService_GetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonTasksServiceServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonTasksService_ServiceDesc is the grpc.ServiceDesc for CommonTasksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonTasksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.inventoryapi.v1.CommonTasksService",
	HandlerType: (*CommonTasksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModels",
			Handler:    _CommonTasksService_GetModels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/inventoryapi/v1/common_tasks.proto",
}
