components:
  schemas:
    jsonapiErrorObject:
      properties:
        code:
          description: an application-specific error code, expressed as a string value.
          example: USER_UPDATE_FAILED
          type: string
        detail:
          description: a human-readable explanation specific to this occurrence of the problem. Like title.
          example: A field under /user/age is not correct, should be 'number' instead of 'string'
          type: string
        id:
          description: a unique identifier for this particular occurrence of the problem.
          example: BAD_REQUEST
          type: string
        links:
          $ref: '#/components/schemas/jsonapiLinks'
        meta:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          description: a meta object containing non-standard meta-information about the error.
          type: object
        source:
          $ref: '#/components/schemas/jsonapiErrorObjectSource'
        status:
          description: the HTTP status code applicable to this problem, expressed as a string value.
          example: "400"
          format: int64
          type: integer
        title:
          example: Failed to update user's profile, invalid parameter(s) detected
          title: a short, human-readable summary of the problem
          type: string
      type: object
    jsonapiErrorObjectSource:
      properties:
        header:
          description: a string indicating the name of a single request header which caused the error.
          example: X-SOME-HEADER
          type: string
        parameter:
          description: a string indicating which URI query parameter caused the error.
          example: created_at.ASC
          type: string
        pointer:
          description: |-
            a JSON Pointer [RFC6901] to the value in the request document that caused the error
            [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
          example: /user/age
          type: string
      type: object
    jsonapiLinks:
      description: Where specified, a links member can be used to represent links.
      properties:
        describedby:
          description: a link to a description document (e.g. OpenAPI or JSON Schema) for the link target.
          example: OpenAPI
          type: string
        href:
          description: a string whose value is a URI-reference [RFC3986 Section 4.1] pointing to the link’s target.
          example: https://apidocs.example.com/errors/BAD_REQUEST
          type: string
        hreflang:
          description: |-
            a string or an array of strings indicating the language(s) of the link’s target.
            An array of strings indicates that the link’s target is available in multiple languages.
          example: en-US
          type: string
        meta:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          description: a meta object containing non-standard meta-information about the link.
          type: object
        rel:
          description: a string indicating the link’s relation type.
          example: external
          type: string
        title:
          description: |-
            a string which serves as a label for the destination of a link
            such that it can be used as a human-readable identifier (e.g., a menu entry).
          example: Learn more about BAD_REQUEST
          type: string
        type:
          description: a string indicating the media type of the link’s target.
          example: text/html
          type: string
      type: object
    protobufAny:
      additionalProperties: {}
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
    v1CommonTask:
      default: CommonTaskUnspecified
      enum:
        - CommonTaskUnspecified
        - CommonTaskTextEmbedding
        - CommonTaskTextGeneration
        - CommonTaskTextToSpeech
        - CommonTaskAutomaticSpeechRecognition
        - CommonTaskFeatureExtraction
      type: string
    v1GetModelsModelItem:
      properties:
        automaticSpeechRecognition:
          $ref: '#/components/schemas/v1GetModelsModelItemAutomaticSpeechRecognition'
        cloud:
          $ref: '#/components/schemas/v1GetModelsModelItemProviderCloud'
        commonTask:
          $ref: '#/components/schemas/v1CommonTask'
        deprecated:
          type: boolean
        description:
          type: string
        featureExtraction:
          $ref: '#/components/schemas/v1GetModelsModelItemFeatureExtraction'
        id:
          type: string
        local:
          $ref: '#/components/schemas/v1GetModelsModelItemProviderLocal'
        name:
          type: string
        providerDescription:
          type: string
        providerId:
          type: string
        providerName:
          type: string
        textEmbedding:
          $ref: '#/components/schemas/v1GetModelsModelItemTextEmbedding'
        textGeneration:
          $ref: '#/components/schemas/v1GetModelsModelItemTextGeneration'
        textToSpeech:
          $ref: '#/components/schemas/v1GetModelsModelItemTextToSpeech'
      type: object
    v1GetModelsModelItemAutomaticSpeechRecognition:
      type: object
    v1GetModelsModelItemFeatureExtraction:
      type: object
    v1GetModelsModelItemProviderCloud:
      type: object
    v1GetModelsModelItemProviderLocal:
      type: object
    v1GetModelsModelItemTextEmbedding:
      properties:
        dimensions:
          format: int64
          type: string
      type: object
    v1GetModelsModelItemTextGeneration:
      type: object
    v1GetModelsModelItemTextToSpeech:
      type: object
    v1GetModelsResponse:
      properties:
        models:
          items:
            $ref: '#/components/schemas/v1GetModelsModelItem'
          type: array
      type: object
info:
  description: Catalog of model cards and other metadata, including API & engine benchmarks
  title: Moeru AI Inventory API
  version: "1.0"
openapi: 3.0.3
paths:
  /api/v1/common-tasks/models:
    get:
      description: List all known models.
      operationId: v1_common_tasks_get_models
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetModelsResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: List all known models.
      tags:
        - CommonTasks
